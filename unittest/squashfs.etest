#!/usr/bin/env bash

[[ ${__BU_OS} == Linux ]] || return 0

check_mounts()
{
    etestmsg "Looking for stale squashfs mounts"
    local loop
    for loop in $(awk /squashfs/ '{print $1}' /proc/mounts 2>/dev/null); do
        
        # Follow the squashfs loop mount back to source file
        einfo "$(lval loop)"
        local mnt=$(losetup "${loop}" | awk '{print $3}' | sed 's|^(||')

        # if this mount is inside our test directory it's an error
        if [[ ${mnt} =~ ${ETEST_DIR_OUTPUT} ]]; then
            die "Failed to unmount $(lval mnt)"
        fi
    done
}

ETEST_squashfs_create()
{
    mkdir -p src
    touch src/file1 src/file2
    squashfs_create src dst.squashfs

    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_list()
{
    efreshdir src
    touch src/file1 src/file2
    squashfs_create src dst.squashfs
    
    local contents=( $(squashfs_list dst.squashfs) )
    assert_eq 2 "${#contents[@]}"
    assert_eq "/file1" "${contents[0]}"
    assert_eq "/file2" "${contents[1]}"
 
    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_mount()
{
    etestmsg "Creating src, dst and src.squashfs"
    mkdir -p src dst
    touch src/file1 src/file2
    squashfs_create src src.squashfs

    # Mount it at dst and validate
    etestmsg "Mounting src.squashfs at dst"
    squashfs_mount src.squashfs dst
    find src
    find dst
    assert_exists dst/file1 dst/file2
    diff --recursive src dst

    # Unmount it
    squashfs_unmount dst
    assert_not_exists dst/file1 dst/file2
    
    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_iso()
{
    etestmsg "Creating src, dst and src.squashfs"
    mkdir -p src dst
    touch src/file1 src/file2
    squashfs_create src src.squashfs

    # SFS -> ISO
    etestmsg "Converting to ISO"
    squashfs_to_iso src.squashfs src.iso
    mount --read-only src.iso dst
    trap_add "eunmount dst"
    assert_exists dst/file1 dst/file2
    diff --recursive src dst

    # ISO -> SFS
    etestmsg "Converting ISO back to squashfs"
    squashfs_from_iso src.iso src2.squashfs
    squashfs_extract src2.squashfs src2
    assert_exists src2/file1 src2/file2
    diff --recursive src src2

    # Validate contents
    local contents=( $(squashfs_list src2.squashfs) )
    einfo "$(lval contents)"
    assert_eq 2 "${#contents[@]}"
    assert_eq "/file1" "${contents[0]}"
    assert_eq "/file2" "${contents[1]}"
 
    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_tar()
{
    etestmsg "Creating src, dst and src.squashfs"
    mkdir -p src dst
    touch src/file1 src/file2
    squashfs_create src src.squashfs

    # SFS -> TGZ
    etestmsg "Converting to TGZ"
    squashfs_to_tar src.squashfs src.tgz
    
    etestmsg "Contents of src.tgz"
    tar --list --file src.tgz

    etestmsg "Extracting src.tgz -> src2"
    mkdir -p src2
    etar --extract --directory src2 --file src.tgz
    find src2
    assert_exists src2/file1 src2/file2
    diff --recursive src src2

    # TGZ -> SFS
    etestmsg "Converting TGZ back to squashfs"
    squashfs_from_tar src.tgz src2.squashfs
    squashfs_extract src2.squashfs src3
    assert_exists src3/file1 src3/file2
    diff --recursive src  src3
    diff --recursive src2 src3

    # Validate contents
    local contents=( $(squashfs_list src2.squashfs) )
    assert_eq 2 "${#contents[@]}"
    assert_eq "/file1" "${contents[0]}"
    assert_eq "/file2" "${contents[1]}"

    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_diff()
{
    etestmsg "Creating two identical squashfs images -- diff should be identical"
    mkdir -p src1 src2
    touch src1/{file1,file2} src2/{file1,file2}
    squashfs_create src1 src1.squashfs
    squashfs_create src2 src2.squashfs
    squashfs_diff src1.squashfs src2.squashfs
  
    etestmsg "Creating two different squashfs images -- diff should be different"
    mkdir -p src3 src4
    touch src3/{file1,file2} src4/{fileA,fileB,fileC}
    squashfs_create src3 src3.squashfs
    squashfs_create src4 src4.squashfs
    $(tryrc squashfs_diff src3.squashfs src4.squashfs)
    assert_ne 0 ${rc}

    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_modify()
{
    etestmsg "Creating src, dst and src.squashfs"
    mkdir -p src dst
    touch src/{file0,file1,file2}
    squashfs_create src src.squashfs

    # Mount it at dst. Modify the files.
    etestmsg "Modifying squashfs mounted files"
    squashfs_mount src.squashfs dst
    echo "File#1" > dst/file1
    echo "File#2" > dst/file2
    assert_eq "File#1" "$(cat dst/file1)"
    assert_eq "File#2" "$(cat dst/file2)"
    squashfs_tree dst

    # Save off the RW layer as a squashfs image
    etestmsg "Saving RW layer as rw.squashfs then unmounting"
    squashfs_save_changes dst rw.squashfs
    squashfs_unmount dst

    # Mount it again - ensure original files unmodified
    etestmsg "Mounting again -- ensuring original files unmodified"
    efreshdir dst
    squashfs_mount src.squashfs dst
    assert_empty "$(cat dst/file0)"
    assert_empty "$(cat dst/file1)"
    assert_empty "$(cat dst/file2)"
    squashfs_unmount dst

    # RW layer should only have the MODIFIED files in it (we never modifvied file0)
    local contents=( $(squashfs_list rw.squashfs) )
    assert_eq 2 "${#contents[@]}"
    assert_eq "/file1" "${contents[0]}"
    assert_eq "/file2" "${contents[1]}"

    # Mount the RW layer and ensure contents are as expected
    efreshdir dst
    squashfs_mount rw.squashfs dst
    assert_eq "File#1" "$(cat dst/file1)"
    assert_eq "File#2" "$(cat dst/file2)"
    squashfs_unmount dst

    # Ensure everything unmounted
    check_mounts
}

ETEST_squashfs_layers()
{
    etestmsg "Creating multiple squashfs images"
    mkdir -p src1 src2 src3
    touch src1/{file1,file2} src2/{file3,file4} src3/{file5,file6}
    squashfs_create src1 src1.squashfs
    squashfs_create src2 src2.squashfs
    squashfs_create src3 src3.squashfs

    # Mount all three images and verify expected contents
    etestmsg "Mounting all squashfs images into single dst directory"
    mkdir -p dst
    squashfs_mount src1.squashfs src2.squashfs src3.squashfs dst
    squashfs_tree dst
    assert_exists dst/{file1,file2,file3,file4,file5,file6}

    # Unmount all images
    etestmsg "Unmounting final image"
    squashfs_unmount dst
    assert_not_exists dst/{file1,file2,file3,file4,file5,file6}
    assert_false grep "src1.squashfs" /proc/mounts
    assert_false grep "src2.squashfs" /proc/mounts
    assert_false grep "src3.squashfs" /proc/mounts

    # Ensure everything unmounted
    check_mounts
}
