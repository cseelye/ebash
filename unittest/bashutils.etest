# Tests specifically for the bashutils binary

ETEST_bashutils_bin_args()
{
    string=" alpha   omega "
    $(tryrc --rc rc --stderr stderr ${BASHUTILS_HOME}/bin/bashutils einfo "${string}")

    assert_eq 0 ${rc}
    assert_match "${stderr}" "${string}"
}

ETEST_bashutils_bin_symlink()
{
    string=" beta  gamma  "
    $(tryrc --rc rc --stderr stderr ${BASHUTILS_HOME}/bin/ewarn "${string}")

    assert_eq 0 ${rc}
    assert_match "${stderr}" "${string}"
}

ETEST_bashutils_bin_symlink_name_plus_func()
{
    string="  omega  alpha  "
    $(tryrc --rc rc --stdout stdout ${BASHUTILS_HOME}/bin/string trim "${string}")

    assert_eq 0 ${rc}
    assert_eq "omega  alpha" "${stdout}"
}

ETEST_bashutils_bin_calls_ibu()
{
    $(tryrc --rc rc --stderr stderr ${BASHUTILS_HOME}/bin/bashutils</dev/null)

    assert_eq 0 ${rc}
    assert_match "${stderr}" ">>.*Bashutils BASHUTILS="
}

ETEST_bashutils_bin_source()
{
cat<<'EOF' >testfile.sh
an_unusual_func()
{
    echo "in ${FUNCNAME}"
}
EOF

    output=$(${BASHUTILS_HOME}/bin/bashutils --source testfile.sh an_unusual_func)

    assert_match "${output}" "in an_unusual_func"

}

ETEST_bashutils_bin_specify_name()
{
    string="  hello  there  "
    $(tryrc --rc rc --stderr stderr ${BASHUTILS_HOME}/bin/bashutils --name einfo "${string}")

    assert_eq 0 ${rc}
    assert_match "${stderr}" "${string}"
}

ETEST_bashutils_bin_right_args()
{ 
cat<<'EOF' >testfile.sh
argchecker()
{
    echo "called with args $1 $2"
}
argchecker_func()
{
    echo "called func with args $1 $2"
}
EOF

    $(tryrc --rc rc --stdout stdout ${BASHUTILS_HOME}/bin/bashutils --source testfile.sh argchecker ARG1 ARG2)

    etestmsg "Called as bashutils $(lval stdout rc)"
    assert_eq "called with args ARG1 ARG2" "${stdout}"
    assert_eq 0 ${rc}

    $(tryrc --rc rc --stdout stdout ${BASHUTILS_HOME}/bin/bashutils --source testfile.sh --name argchecker ALPHA BETA )
    etestmsg "Called by binary name $(lval stdout rc)"
    assert_eq "called with args ALPHA BETA" "${stdout}"
    assert_eq 0 ${rc}

    $(tryrc --rc rc --stdout stdout ${BASHUTILS_HOME}/bin/bashutils --source testfile.sh --name argchecker func MARS JUPITER)
    etestmsg "Called by binary nume with func following $(lval stdout rc)"
    assert_eq "called func with args MARS JUPITER" "${stdout}"
    assert_eq 0 ${rc}
}

ETEST_bashutils_bin_no_args()
{
    local output=$(EMSG_PREFIX="" ECOLOR=1 ewarn hi |& ${BASHUTILS_HOME}/bin/noansi)
    etestmsg "$(lval output)"

    assert_eq ">> hi" "${output}"
}
