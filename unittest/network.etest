#!/usr/bin/env bash

if [[ ${__BU_OS} == Linux ]] ; then

ETEST_get_listening_network_ports()
{
    [[ "$(edistro)" == "Arch" ]] && { ewarn "Test disabled on arch per DT-190." ; return 0 ; }

    local ports
    get_network_ports -l ports

    # We should always be able to find a listening port on 22
    for key in $(array_indexes ports); do
        [[ $(pack_get ports[$key] local_port) == 22 ]] && return 0
    done
    die "Could not find port 22"
}

ETEST_netselect()
{
    local output=$(netselect --quiet localhost)

    assert_eq "localhost" "${output}"
}

ETEST_get_network_pci_device_sanity()
{
    # Mock info pulled from samples of these nodes:
    # eth0-3:   R630 node
    # eth4-7:   VMware node
    # eth8-11:  VirtualBox node
    # eth12-15: KVM node
    # eth16-19: C220 node
    pack_set mock_nics eth0="bus-info: 0000:01:00.0" \
                       eth1="bus-info: 0000:01:00.1" \
                       eth2="bus-info: 0000:01:00.2" \
                       eth3="bus-info: 0000:01:00.3" \
                       \
                       eth4="bus-info: 0000:03:00.0" \
                       eth5="bus-info: 0000:0b:00.0" \
                       eth6="bus-info: 0000:13:00.0" \
                       eth7="bus-info: 0000:1b:00.0" \
                       \
                       eth8="bus-info: 0000:00:03.0" \
                       eth9="bus-info: 0000:00:08.0" \
                       eth10="bus-info: 0000:00:09.0" \
                       eth11="bus-info: 0000:00:0a.0" \
                       \
                       eth12="bus-info: 0000:00:1e.0" \
                       eth13="bus-info: 0000:00:1e.1" \
                       eth14="bus-info: 0000:00:1e.2" \
                       eth15="bus-info: 0000:00:1e.3" \
                       \
                       eth16="bus-info: 0000:09:00.0" \
                       eth17="bus-info: 0000:0a:00.0" \
                       eth18="bus-info: 0000:01:00.0" \
                       eth19="bus-info: 0000:01:00.1"

    # Mock out ethtool for invocation "ethtool -i ifname"
    ethtool(){ pack_get mock_nics $2; }

    for ifname in $(pack_keys mock_nics); do
        address=$(get_network_pci_device ${ifname})
        # Make sure the address looks like a PCI address
        edebug "$(lval ifname address)"
        [[ ${address} =~ ^[0-9]{4}:[0-9a-f]{2}:[0-9a-f]{2}\.[0-9] ]] || die "Invalid PCI address"
    done
}

ETEST_get_network_pci_device_hyperv()
{
    local addr_expected="vmbus_0_13"

    # Mock out ethtool to not return the requested info, as it behaves on HyperV VMs
    ethtool(){ echo ""; }
    # Mock out basename to return a HyperV looking address
    basename(){ echo "${addr_expected}"; }

    ifaces=( $(get_network_interfaces) )
    local addr_result=$(get_network_pci_device ${ifaces[0]})
    [[ ${addr_result} == ${addr_expected} ]] || die "$(lval test_addr) does not equal expected $(lval addr_expected)"
}

ETEST_netmask2cidr()
{
    local entry=""
    for entry in "255.255.255.255:32" "255.255.255.254:31" "255.255.255.252:30" "255.255.255.248:29" \
                 "255.255.255.240:28" "255.255.255.224:27" "255.255.255.192:26" "255.255.255.128:25" \
                 "255.255.255.0:24"   "255.255.254.0:23"   "255.255.252.0:22"   "255.255.248.0:21"   \
                 "255.255.240.0:20"   "255.255.224.0:19"   "255.255.192.0:18"   "255.255.128.0:17"   \
                 "255.255.0.0:16"     "255.254.0.0:15"     "255.252.0.0:14"     "255.248.0.0:13"     \
                 "255.240.0.0:12"     "255.224.0.0:11"     "255.192.0.0:10"     "255.128.0.0:9"      \
                 "255.0.0.0:8"        "254.0.0.0:7"        "252.0.0.0:6"        "248.0.0.0:5"        \
                 "240.0.0.0:4"        "224.0.0.0:3"        "192.0.0.0:2"        "128.0.0.0:1"; do

        local netmask=${entry%%:*}
        local expect=${entry#*:}
        local actual=$(netmask2cidr "${netmask}")
        einfo "$(lval netmask expect actual)"
        assert_eq "${expect}" "${actual}"
    done
}

fi
