#!/usr/bin/env bash

# Helper function to call eprompt and assert that it has the expected return code and output.
assert_eprompt()
{
    $(opt_parse \
        ":rc=0    | Expected return code." \
        "+yn      | Call epromptyn instead of eprompt." \
        ":options | Options that are valid (call eprompt_with_options intead of eprompt)." \
        ":secret  | Secret options (call eprompt_with_options instead of eprompt.)" \
        "?input   | Input to send to eprompt." \
        "?stdout  | Expected stdout.")

    if [[ ${yn} -eq 1 ]]; then
        $(tryrc --rc=actual_rc --stdout=actual_stdout "echo \"${input}\" | epromptyn \"Input\"")
    elif [[ -n "${options}" || -n "${secret}" ]]; then
        $(tryrc --rc=actual_rc --stdout=actual_stdout "echo \"${input}\" | eprompt_with_options \"Input\" \"${options}\" \"${secret}\"")
    else
        $(tryrc --rc=actual_rc --stdout=actual_stdout "echo \"${input}\" | eprompt \"Input\"")
    fi

    assert_eq "${rc}"     "${actual_rc}"
    assert_eq "${stdout}" "${actual_stdout}"
}

ETEST_eprompt_basic()
{
    assert_eprompt "${USER}" "${USER}"
}

ETEST_eprompt_spaces()
{
    local input="This is an input string with spaces"
    assert_eprompt "${input}" "${input}"
}

# eprompt only reads a single line of input and it is not currently allowed to contain newlines. This test is designed
# to test that behavior.
ETEST_eprompt_single_line()
{
    local input=$'First\nSecond'
    assert_eprompt "${input}" "First"
}

ETEST_epromptyn_case()
{
    assert_eprompt --yn "Yes" "Yes"
    assert_eprompt --yn "YES" "Yes"
    assert_eprompt --yn "YeS" "Yes"
    assert_eprompt --yn "yes" "Yes"
    assert_eprompt --yn "No"  "No"
    assert_eprompt --yn "NO"  "No"
    assert_eprompt --yn "no"  "No"
}

ETEST_epromptyn_invalid()
{
    assert_eprompt --yn --rc 143 "Foobar"
}

ETEST_eprompt_options()
{
    assert_eprompt --options "Option1,Option2,Option3" "Option1" "Option1"
    assert_eprompt --options "Option1,Option2,Option3" "Option2" "Option2"
    assert_eprompt --options "Option1,Option2,Option3" "Option3" "Option3"
}

ETEST_eprompt_options_invalid()
{
    assert_eprompt --options "Option1,Option2,Option3" --rc 143 "Invalid"
}

ETEST_eprompt_options_secret()
{
    assert_eprompt --options "Option1,Option2,Option3" --secret "Secret1,Secret2" "Option1" "Option1"
    assert_eprompt --options "Option1,Option2,Option3" --secret "Secret1,Secret2" "Secret2" "Secret2"
}
