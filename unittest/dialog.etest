#!/usr/bin/env bash

# DT-373: Dialog doesn't work properly on OSX and Ubuntu 12.04. The version of dialog on Darwin does not properly
# handle BU_KEY_DELETE and also misses the final character on the last field being modified. Ubuntu 12.04 has a very old
# version of dialog and it is missing required flags --default-button and --default-item. This check will exclude these
# two OSes completely so the code doesn't get included at all. This means we don't have to check for support in all the
# dialog functions as they won't be emitted or callable at all.
if os Darwin || (os_distro ubuntu && os_release 12.04); then
    return 0
fi

# Verify internal behavior of dialog_read with regards to how it handles whitespace and multi-byte keys
ETEST_dialog_read()
{
    local char=""

    etestmsg "Sanity test of single character"
    $(printf "A" | dialog_read char)
    einfos "Read $(lval char)"
    assert_eq "A" "${char}"

    etestmsg "Ensure it can deal with whitespace properly"
    $(printf " " | dialog_read char)
    einfos "Read $(lval char)"
    assert_eq " " "${char}"

    etestmsg "Mult characters should read only first char"
    $(printf "ABCD" | dialog_read char)
    einfos "Read $(lval char)"
    assert_eq "A" "${char}"

    # Verify it handles all our mult-byte special keys properly
    etestmsg "Verifying multi-byte special keys"
    local key val
    for key in UP DOWN RIGHT LEFT TAB ESC ENTER BACKSPACE DELETE; do
        einfos "Verifying $(lval key)"

        eval "val=\${BU_KEY_${key}}"
        $(printf "${val}" | dialog_read char)
        assert_eq --hexdump "${val}" "${char}"
    done
}

ETEST_dialog_read_term()
{
    # NOTE: 'toe' command is used to enumerate all the supported terminfo types on the running machine. Our dialog
    # code should work on all TERM values as it's implemented in a generic fashion. We also explicitly enumerate 
    # 'xterm-256color' as that is our default BASHUTILS setting for TERM. We must exclude 'dumb' because, well it is 
    # really dumb and ansi escape sequences just don't work there. The "|| true" here is because 'dumb' is not included
    # in toe output on some distros (fedora) and we don't want it to fail if it fails to exclude it.
    local term
    for term in xterm-256color $(toe | awk '{print $1}' | grep -v dumb || true); do
    (
        export TERM=${term}
        ebanner "Testing with $(lval TERM)"
        dialog_load
        ETEST_dialog_read
    )
    done
}

# Setup flags we want to use for all these tests
DIALOG_PROMPT="dialog_prompt --hide --trace"

ETEST_dialog_prompt_single()
{
    local input="Locke${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} philo1)
    assert_eq "Locke" "${philo1}"
}

# Test multiple input fields. Also verifies that the down arrow key is used to seamlessly navigate between fields
# without having to press ENTER to exit the first field and enter the second field.
ETEST_dialog_prompt_multi()
{
    local input="Locke${BU_KEY_DOWN}Hobbes${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} philo1 philo2)
    assert_eq "Locke"  "${philo1}"
    assert_eq "Hobbes" "${philo2}"
}

ETEST_dialog_prompt_multi_spaces()
{
    local input="Locke${BU_KEY_DOWN}Thomas Hobbes${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} philo1 philo2)
    assert_eq "Locke"         "${philo1}"
    assert_eq "Thomas Hobbes" "${philo2}"
}

ETEST_dialog_prompt_optional()
{
    local input="${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} ?field1)
    assert_empty "${field1}"
}

ETEST_dialog_prompt_optional_multi_first()
{
    # There are three input fields, but we skip the second one. Because it's marked optional this should pass.
    local input="${BU_KEY_DOWN}Locke${BU_KEY_DOWN}Hobbes${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} ?philo1 philo2 philo3)
    assert_empty       "${philo1}"
    assert_eq "Locke"  "${philo2}"
    assert_eq "Hobbes" "${philo3}"
}

ETEST_dialog_prompt_optional_multi_middle()
{
    # There are three input fields, but we skip the second one. Because it's marked optional this should pass.
    local input="Locke${BU_KEY_DOWN}${BU_KEY_DOWN}Hobbes${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} philo1 ?philo2 philo3)
    assert_eq "Locke"  "${philo1}"
    assert_empty       "${philo2}"
    assert_eq "Hobbes" "${philo3}"
}

ETEST_dialog_prompt_optional_multi_last()
{
    # There are three input fields, but we skip the second one. Because it's marked optional this should pass.
    local input="Locke${BU_KEY_DOWN}Hobbes${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} philo1 philo2 ?philo3)
    assert_eq "Locke"  "${philo1}"
    assert_eq "Hobbes" "${philo2}"
    assert_empty       "${philo3}"
}

ETEST_dialog_prompt_move_without_edit()
{
    local input="${BU_KEY_DOWN}${BU_KEY_DOWN}${BU_KEY_DOWN}${BU_KEY_UP}${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} ?philo1 ?philo2 ?philo3)
    assert_empty "${philo1}"
    assert_empty "${philo2}"
    assert_empty "${philo3}"
}

ETEST_dialog_prompt_default_values()
{
    local input="${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} "?philo1=John Locke" "?philo2=Kant" "?philo3=John Stuart Mill")
    assert_eq "John Locke"       "${philo1}"
    assert_eq "Kant"             "${philo2}"
    assert_eq "John Stuart Mill" "${philo3}"
}

ETEST_dialog_prompt_default_values_override()
{
    # Since we intend to overwrite the existing values we need to delete the keys already present.
    local input="${BU_KEY_DELETE}Thomas Jefferson${BU_KEY_DOWN}${BU_KEY_DOWN}${BU_KEY_DELETE}John Rawls${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} "?philo1=A" "?philo2=Kant" "?philo3=_")
    assert_eq "Thomas Jefferson" "${philo1}"
    assert_eq "Kant"             "${philo2}"
    assert_eq "John Rawls"       "${philo3}"
}

ETEST_dialog_prompt_default_values_override_term()
{
    export TERM=linux
    dialog_load

    # Since we intend to overwrite the existing values we need to delete the keys already present.
    local input="${BU_KEY_DELETE}Thomas Jefferson${BU_KEY_DOWN}${BU_KEY_DOWN}${BU_KEY_DELETE}John Rawls${BU_KEY_DONE}"
    $(printf "${input}" | ${DIALOG_PROMPT} "?philo1=A" "?philo2=Kant" "?philo3=_")
    assert_eq "Thomas Jefferson" "${philo1}"
    assert_eq "Kant"             "${philo2}"
    assert_eq "John Rawls"       "${philo3}"
}


# Wherever we are in the dialog menu, escape key should take us out immediately.
ETEST_dialog_prompt_escape()
{
    try
    {
        $(disable_die_parent; printf "${BU_KEY_ESC}" | ${DIALOG_PROMPT} ?philo1 ?philo2 ?philo3)

        # The above code should have exitted with DIALOG_CANCEL(1). We're going to check for that in the catch block
        # specifically. If we got here, then something went wrong. So we'll exit with a different value (it doesn't
        # matter what as long as it's not DIALOG_CANCEL(1).).
        eerror "Should have failed due to ESCAPE key being pressed"
        exit 100
    }
    catch
    {
        assert_eq ${DIALOG_CANCEL} $?
    }
}

ETEST_dialog_prompt_escape_during_input()
{
    local input="${BU_KEY_DELETE}Thomas Jefferson${BU_KEY_DOWN}${BU_KEY_DELETE}${BU_KEY_DELETE}John ${BU_KEY_ESC}"
 
    try
    {
        $(disable_die_parent; printf "${input}" | ${DIALOG_PROMPT} ?philo1 ?philo2 ?philo3)

        # The above code should have exitted with DIALOG_CANCEL(1). We're going to check for that in the catch block
        # specifically. If we got here, then something went wrong. So we'll exit with a different value (it doesn't
        # matter what as long as it's not DIALOG_CANCEL(1).).
        eerror "Should have failed due to ESCAPE key being pressed"
        exit 100
    }
    catch
    {
        assert_eq ${DIALOG_CANCEL} $?
    }
}

ETEST_dialog_prompt_invalid_characters()
{
    local fields=(
        "Field With Spaces"
        $'Field\nWith\nNewlines\n'
        $'Field:With+Punctuation!'
        $'DoNotUse**'
    )

    etestmsg "Testing with invalid characters in prompt fields"
    local field
    for field in "${fields[@]}"; do
        einfos "$(lval field)"
        $(tryrc --stdout=ignore --stderr=ignore ${DIALOG_PROMPT} "${field}")
        assert_eq 1 ${rc}
    done
}
