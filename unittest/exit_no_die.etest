#!/usr/bin/env bash

$(${BASHUTILS_HOME}/bin/bashutils --source)

#-------------------------------------------------------------------------------------------------------------------------
# SANITY TEST EXPLICITLY CALLING EXIT TO ENSURE DIE IS NOT CALLED
# 
# NOTE: This is intentionally NOT an etest.  This script must be run in its
# own TOP-LEVEL shell.
#-------------------------------------------------------------------------------------------------------------------------

# Create a script to run
OUTPUT=$(mktemp --tmpdir etest-output-txt-XXXXXX)
SCRIPT=$(mktemp --tmpdir etest-script-sh-XXXXXX)
trap_add "rm --force ${OUTPUT} ${SCRIPT}"

cat <<EOF >${SCRIPT}

source "${BASHUTILS}/bashutils.sh" || { echo "Unable to source ${BASHUTILS}/bashutils.sh" >&2 ; exit 1 ; }

die_handler()
{
    # Die handler should NOT GET CALLED so if it is FAIL.
    edebug "DIE_HANDLER called"
    echo "DIE" >> "${OUTPUT}"
    
    exit 1
}

# Explicitly call exit 5 and ensure die is NOT called
echo "MAIN" >> "${OUTPUT}"
exit 5
EOF
chmod +x ${SCRIPT}

# Run the script we created above - have to disable die_on_error or else we'd
# blow up here since the script exits with non-zero.
nodie_on_error
${SCRIPT}
rc=$?
die_on_error

# Assert proper order of events happened
einfo "Output file:"
cat ${OUTPUT}
assert_eq 1 $(wc -l ${OUTPUT})
first=$(head -1 ${OUTPUT})

assert_eq "MAIN" "${first}" "main() not called first"
assert_eq 5 "${rc}"

exit 0
