#!/usr/bin/env bash

ETEST_argcheck()
{
    try
    {
        alpha="notempty"
        output=$((argcheck alpha beta 2>&1))
        die "argcheck should have thrown"
    }
    catch
    {
        return 0
    }

    die "argcheck should have thrown"
}

ETEST_fully_qualify_hostname_ignores_case()
{
    TEST_HOSTNAME="some.host.com"
    host() { echo "${TEST_HOSTNAME} has address 10.2.3.4" ; }

    local short_name=${TEST_HOSTNAME%%.*}
    etestmsg "Simulating DNS requests for ${short_name}"

    # Make sure it works for either case coming in
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname "${short_name}")
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname "${short_name^^}")

    # And also for either case being returned by DNS
    host() { echo "${TEST_HOSTNAME^^} has address 10.2.3.4" ; }
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname bdr-es56)
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname BDR-ES56)
}

ETEST_hostname_to_ip()
{
    host() { echo "some.host.com has address 10.2.3.4" ; }
    assert_eq "10.2.3.4" "$(hostname_to_ip some.host.com)"
}

ETEST_detect_var_types()
{
    A=a
    ARRAY=(1 2 3)

    declare -A AA
    AA[alpha]=1
    AA[beta]=2

    pack_set P A=1

    is_array               A && die
    is_associative_array   A && die
    is_pack                A && die

    is_array               ARRAY || die
    is_associative_array   ARRAY && die
    is_pack                ARRAY && dei

    is_array               AA && die
    is_associative_array   AA || die
    is_pack                AA && die

    is_array               %P && die
    is_associative_array   %P && die
    is_pack                %P || die
}

# Ensure local variable assignments don't mask errors. Specifically things of this form:
# 'local x=$(false)' need to still trigger fatal error handling.
ETEST_local_variables_masking_errors()
{
    try
    {
        local foo=$(false)
        die "local variable assignment should have thrown"
    }
    catch
    {
        return 0
    }

    die "try block should have thrown"
}

ETEST_signals()
{
    assert_eq "2" "$(signum 2)"
    assert_eq "2" "$(signum int)"
    assert_eq "2" "$(signum SIGINT)"

    assert_eq "TERM" "$(signame 15)"
    assert_eq "TERM" "$(signame term)"
    assert_eq "TERM" "$(signame SIGTERM)"

    assert_eq "SIGPIPE" "$(signame -s 13)"
    assert_eq "SIGPIPE" "$(signame -s pipe)"
    assert_eq "SIGPIPE" "$(signame -s SIGPIPE)"

    assert_eq "EXIT" "$(signame -s exit)"
    assert_eq "ERR" "$(signame -s err)"
    assert_eq "DEBUG" "$(signame -s debug)"

    assert_eq "137"  "$(sigexitcode 9)"
    assert_eq "137"  "$(sigexitcode kill)"
    assert_eq "137"  "$(sigexitcode SIGKILL)"
}

ETEST_close_fds()
{
    touch ${FUNCNAME}_{A..C}

    etestmsg "Opening file descriptors to my test files"
    exec 53>${FUNCNAME}_A 54>${FUNCNAME}_B 55>${FUNCNAME}_C
    local localpid=$BASHPID
    ls -ltr $(fd_path)

    # Yup, they're open
    assert test -e $(fd_path)/53
    assert test -e $(fd_path)/54
    assert test -e $(fd_path)/55

    etestmsg "Closing file descriptors"
    close_fds
    ls -ltr $(fd_path)

    # Yup, they're closed
    assert_false test -e $(fd_path)/53
    assert_false test -e $(fd_path)/54
    assert_false test -e $(fd_path)/55
}

ETEST_err_and_debug_traps_are_inherited()
{
    on_error()
    {
        echo "ERROR $BASHPID"
    }

    on_debug()
    {
        true
    }

    trap on_error ERR
    trap on_debug DEBUG
    local expected=$(trap -p ERR DEBUG)

    etestmsg "Error trap is $(lval expected)"

    (
        etestmsg "Inside subshell you can see it."
        assert_eq "${expected}" "$(trap -p ERR DEBUG)"

        # Without bashutils shenanigans, bash will reset your inherited error
        # trap after you set any other trap including SIGUSR1.  But bashutils
        # overrides this and restores the ERR trap.
        etestmsg "Verifying that it remains after a call to trap."
        trap on_usr1 SIGUSR1
        assert_eq "${expected}" "$(trap -p ERR DEBUG)"

        (
            etestmsg "Inside a second subshell."
            assert_eq "${expected}" "$(trap -p ERR DEBUG)"

            etestmsg "Verifying it still remains after a call to trap_add."
            trap_add "true"
            assert_eq "${expected}" "$(trap -p ERR DEBUG)"
        )
    )
    etestmsg "End test."
}

ETEST_trap_add_two_per_shell()
{
    assert_not_exists {a,b,c,d,e,f}

    (
        trap_add "touch a"
        trap_add "touch b"
        (
            trap_add "touch c"
            trap_add "touch d"
            (
                trap_add "touch e"
                trap_add "touch f"
            )
            assert_exists e f
        )
        assert_exists c d
    )
    assert_exists a b

    rm -f {a,b,c,d,e,f}
}

ETEST_string_truncate()
{
    string=1234567890

    assert_eq "123"        "$(string_truncate 3  "${string}")"
    assert_eq "1234567890" "$(string_truncate 10 "${string}")"
    assert_eq "1234567890" "$(string_truncate 99 "${string}")"

    assert_eq "1234..."    "$(string_truncate -e 7  "${string}")"
    assert_eq "123456..."  "$(string_truncate -e 9  "${string}")"
    assert_eq "1234567890" "$(string_truncate -e 10 "${string}")"
    assert_eq "1234567890" "$(string_truncate -e 99 "${string}")"

    string=" something   with   whitespace "
    assert_eq "${string}"         "$(string_truncate -e 100 "${string}")"
    assert_eq "${string}"         "$(string_truncate -e 100 "${string}")"
    assert_eq "${string}"         "$(string_truncate -e  31 "${string}")"
    assert_eq "${string:0:15}"    "$(string_truncate     15 "${string}")"
    assert_eq "${string:0:12}..." "$(string_truncate -e  15 "${string}")"
}

ETEST_assert_true()
{
    assert_true true
    $(tryrc assert_true false)
    [[ ${rc} -ne 0 ]]

    assert_true [[ a == a ]]

    a=" 1 2 3 "
    b=" 4  5  6 "
    assert_true [[ "${a}" == "${a}" ]]
    $(tryrc assert_true [[ "${a}" == "${b}" ]])
    [[ ${rc} -ne 0 ]]
}

ETEST_assert_false()
{
    etestmsg "assert_false false is true"
    assert_false false

    etestmsg "assert_false true is false"
    $(tryrc assert_false true)
    [[ ${rc} -ne 0 ]]
}

ETEST_assert_empty()
{
    assert_empty ""
    assert_false assert_empty "a"
    assert_false assert_empty " "

    assert_empty "" "" ""
    assert_false assert_empty "" "" "a" "" ""
}

ETEST_assert_not_empty()
{
    assert_not_empty "a"
    assert_not_empty " "
    assert_false assert_not_empty ""

    assert_not_empty "a" "a" "a" "a" "a b"
    assert_false assert_not_empty "a" "a" "a" "" "a b" "a"
}

ETEST_assert_var_empty()
{
    local empty=""
    local not_empty="a"

    assert_var_empty empty
    assert_false assert_var_empty not_empty
}

ETEST_assert_exists()
{
    touch "file"
    assert_exists file
    rm "file"
    assert_false assert_exists file
}

ETEST_assert_exists_filename_with_whitespace()
{
    touch "a b"
    assert_exists "a b"
    rm "a b"
    assert_false assert_exists "a b"
}

ETEST_assert_not_exists()
{
    assert_not_exists "file"
    touch file
    assert_false assert_not_exists "file"
}

ETEST_assert_not_exists_filename_with_whitespace()
{
    touch "a b"
    assert_false assert_not_exists "a b"
    rm "a b"
    assert_not_exists "a b"
}

ETEST_assert_eq()
{
    assert_eq "a" "a"
    assert_eq "a b" "a b"
    assert_false assert_eq "a" "b"
    assert_false assert_eq "a b" "a"
}

ETEST_assert_ne()
{
    assert_ne "a" "b"
    assert_ne "a" "a b"
    assert_ne 0 1

    assert_false assert_ne "a" "a"
    assert_false assert_ne "a b" "a b"
}

ETEST_assert_match()
{
    assert_match "hallowed" "hall"
    assert_false assert_match "hall" "hallowed"

    assert_match "a b c" "b c"
    assert_false assert_match "c b a" "a b"
}

ETEST_assert_zero()
{
    assert_zero 0
    assert_false assert_zero 1
}

ETEST_assert_zero()
{
    assert_not_zero 1
    assert_false assert_not_zero 0
}
