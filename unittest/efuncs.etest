#!/usr/bin/env bash

ETEST_argcheck()
{
    try
    {
        alpha="notempty"
        output=$((argcheck alpha beta 2>&1))
        die "argcheck should have thrown"
    }
    catch
    {
        return 0
    }

    die "argcheck should have thrown"
}

ETEST_fully_qualify_hostname_ignores_case()
{
    TEST_HOSTNAME="some.host.com"
    host() { echo "${TEST_HOSTNAME} has address 10.2.3.4" ; }

    local short_name=${TEST_HOSTNAME%%.*}
    etestmsg "Simulating DNS requests for ${short_name}"

    # Make sure it works for either case coming in
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname "${short_name}")
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname "${short_name^^}")

    # And also for either case being returned by DNS
    host() { echo "${TEST_HOSTNAME^^} has address 10.2.3.4" ; }
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname bdr-es56)
    assert_eq "${TEST_HOSTNAME}" $(fully_qualify_hostname BDR-ES56)
}

ETEST_hostname_to_ip()
{
    host() { echo "some.host.com has address 10.2.3.4" ; }
    assert_eq "10.2.3.4" "$(hostname_to_ip some.host.com)"
}

ETEST_print_value()
{
    VAR=a
    assert_eq '"a"' "$(print_value VAR)"

    VAR="A[b]"
    assert_eq '"A[b]"' "$(print_value VAR)"

    ARRAY=(a b "c d")
    assert_eq '("a" "b" "c d")' "$(print_value ARRAY)"

    declare -A AA
    AA[alpha]="1 2 3"
    AA[beta]="4 5 6"

    assert_eq '([alpha]="1 2 3" [beta]="4 5 6" )' "$(print_value AA)"

    unset V
    assert_eq '""' "$(print_value V)"

    assert_eq '""' "$(print_value /usr/local/share)"
}

ETEST_detect_var_types()
{
    A=a
    ARRAY=(1 2 3)

    declare -A AA
    AA[alpha]=1
    AA[beta]=2

    pack_set P A=1

    is_array A && die
    is_associative_array A && die
    is_pack A && die

    is_array               ARRAY || die
    is_associative_array   ARRAY && die
    is_pack                ARRAY && dei

    is_array               AA && die
    is_associative_array   AA || die
    is_pack                AA && die

    is_array               +P && die
    is_associative_array   +P && die
    is_pack                +P || die
}

# Ensure local variable assignments don't mask errors. Specifically things of this form:
# 'local x=$(false)' need to still trigger fatal error handling.
ETEST_local_variables_masking_errors()
{
    try
    {
        local foo=$(false)
        die "local variable assignment should have thrown"
    }
    catch
    {
        return 0
    }

    die "try block should have thrown"
}

if [[ ${__BU_OS} == Linux ]] ; then

ETEST_get_listening_network_ports()
{
    local ports
    get_network_ports -l ports

    # We should always be able to find a listening port on 22
    for key in $(array_indexes ports); do
        [[ $(pack_get ports[$key] local_port) == 22 ]] && return 0
    done
    die "Could not find port 22"
}

fi

ETEST_signals()
{
    assert_eq "2" "$(signum 2)"
    assert_eq "2" "$(signum int)"
    assert_eq "2" "$(signum SIGINT)"

    assert_eq "TERM" "$(signame 15)"
    assert_eq "TERM" "$(signame term)"
    assert_eq "TERM" "$(signame SIGTERM)"

    assert_eq "SIGPIPE" "$(signame -s 13)"
    assert_eq "SIGPIPE" "$(signame -s pipe)"
    assert_eq "SIGPIPE" "$(signame -s SIGPIPE)"

    assert_eq "EXIT" "$(signame -s exit)"
    assert_eq "ERR" "$(signame -s err)"
    assert_eq "DEBUG" "$(signame -s debug)"

    assert_eq "137"  "$(sigexitcode 9)"
    assert_eq "137"  "$(sigexitcode kill)"
    assert_eq "137"  "$(sigexitcode SIGKILL)"
}

ETEST_close_fds()
{
    touch ${FUNCNAME}_{A..C}

    etestmsg "Opening file descriptors to my test files"
    exec 53>${FUNCNAME}_A 54>${FUNCNAME}_B 55>${FUNCNAME}_C
    local localpid=$BASHPID
    ls -ltr $(fd_path)

    # Yup, they're open
    assert test -e $(fd_path)/53
    assert test -e $(fd_path)/54
    assert test -e $(fd_path)/55

    etestmsg "Closing file descriptors"
    close_fds
    ls -ltr $(fd_path)

    # Yup, they're closed
    assert_false test -e $(fd_path)/53
    assert_false test -e $(fd_path)/54
    assert_false test -e $(fd_path)/55
}

ETEST_process_hierarchy()
{
    local my_processes_file=$(mktemp pids_XXXXX)
    local ancestors_file=$(mktemp ancestors_XXXXX)
    local ancestors_noarg_file=$(mktemp ancestors_noarg_XXXXX)
    local children_file=$(mktemp children_XXXXX)
    local tree_file=$(mktemp tree_XXXXX)

    local first=$BASHPID
    echo $BASHPID >> ${my_processes_file}
    (
        echo $BASHPID >> ${my_processes_file}
        (
            echo $BASHPID >> ${my_processes_file}
            (
                echo $BASHPID >> ${my_processes_file}
                (
                    etestmsg "Process tree"
                    pstree $$

                    process_ancestors ${BASHPID} > ${ancestors_file}
                    process_ancestors > ${ancestors_noarg_file}

                    process_children ${first} > ${children_file}
                    process_tree ${first} > ${tree_file}
                )
            )
        )
    )

    local last=$(tail -n 1 ${my_processes_file})

    etestmsg "my_processes"
    cat ${my_processes_file}
    etestmsg "ancestors of ${last}"
    cat ${ancestors_noarg_file}
    etestmsg "ancestors_noarg of ${last}"
    cat ${ancestors_noarg_file}
    etestmsg "children of ${first}"
    cat ${children_file}

    local my_processes=( $(cat ${my_processes_file}) )
    local ancestors=( $(cat ${ancestors_file}) )
    local ancestors_noarg=( $(cat ${ancestors_noarg_file}) )
    local children=( $(cat ${children_file}) )
    local tree=( $(cat ${tree_file}) )

    etestmsg "Verifying children $(lval my_processes children first)"
    etestmsg "$(declare -p my_processes)"
    assert_eq 1 $(array_size children)
    assert_eq "${my_processes[1]}" "${children[0]}"


    # The rest of the verification steps are just checking that a list of
    # processes match, not checking them in order, so we'll sort them to make
    # that easier.
    array_sort my_processes ancestors ancestors_noarg children tree


    etestmsg "Verifying ancestors $(lval ancestors process)"
    # Note: there will be ancestors in the list that I don't know about
    # (for instance, the etest processes), but I know that the processes I
    # created and added to pids should be in there.  And so should init -- it's
    # the parent of everything.
    local process
    for process in 1 ${my_processes[@]} ; do
        assert array_contains ancestors ${process}
        assert array_contains ancestors_noarg ${process}
    done

    assert_false array_contains ancestors 0
    assert_false array_contains ancestors_noarg 0

    etestmsg "Verifying tree contains my processes $(lval tree my_processes)"
    for process in ${my_processes[@]} ; do
        assert array_contains tree ${process}
    done
}
