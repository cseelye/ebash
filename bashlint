#!/usr/bin/env bash

: ${BASHUTILS:=$(dirname $0)}
source ${BASHUTILS}/bashutils.sh || { echo "Unable to source ${BASHUTILS}/bashutils.sh" ; exit 1 ; }

# Options:
# -q Quiet mode: Send all output to edebug.
$(declare_args -g)
opt_true "q" && exec &>$(edebug_out)

# Paths to recursively parse
PATHS=( ${@:-.} )

# Helper function to display a failure and increment our failure count
RC=0
FAILURES=()
fail()
{
    echo -e "$(emsg 'red' '   -' 'ERROR' "$@")" >&2
    eend 1
    RC=1
}

# Analyze all the requested bash scripts in the specified directories and pass
# them through bash -n mode which asks bash to make sure the syntax looks okay
# without actually running anything. Additionally, perform several additional
# strictness checks that we have found to be sources of really subtle problems.
# Also checks some stylistic issues for consistent coding.
ebanner "Validating bash scripts" PATHS
for fname in $(grep -lr '^#!/.*bash' ${PATHS[@]} | grep -v '.hg'); do
 
    # If this isn't a bash script skip it
    file ${fname} | grep -Pq "(bash script|Bourne-Again shell script)" || continue

    # Never do any further parsing on our own file since they would all 
    # be false positives
    [[ ${fname} == "$0" ]] && continue

    # Display what file we are processing
    einfo "${fname}"
    bash -n ${fname}

    # Read file into variable so we can do a little preprocessing on it before
    # passing it into the various grep commands below to strip out particular
    # patterns which would otherwise cause false positives.
    CONTENTS=$(cat ${fname}              \
        | grep -vP '^\s*#'               \
        | grep -vP '#\s*BASHLINT_IGNORE' \
        | grep -vP '^\s*function \w+'    \
        | grep -vP '^\s*\w+\s*\(\)\s*$')
    
    # Initial error state
    RC=0

    # Ensure none of the scripts are using non-versioned /usr/local/share/bashutils
    echo "${CONTENTS}" | egrep "(:|)/usr/local/share/bashutils(:|/|\"|$)" \
        && fail "Non-versioned bashutils"

    # Ensure not using removed $(esource ...)
    echo "${CONTENTS}" | egrep '\s*\$\(esource ' \
        && fail "Using removed esource function"
    
    # Ensure not using removed declare_globals or delcare_exports
    echo "${CONTENTS}" | egrep '(declare_globals|declare_exports)' \
        && fail "Using removed declare_globals|declare_exports functions"

    # Ensure not using deprecated 'eval $(declare_args'....
    echo "${CONTENTS}" | egrep 'eval "?\$\(declare_args' \
        && fail "Using deprecated declare_args syntax"

    # Ensure tryrc is inside $( ), because if it's not, it doesn't do what you
    # think it's doing
    echo "${CONTENTS}" | egrep '^[^$]*\<tryrc\>' \
        && fail "Using tryrc without putting it inside \$( )"

    # Don't allow using removed legacy IFS bashutils functions
    echo "${CONTENTS}" | egrep '(ifs_save|ifs_restore|ifs_nl|ifs_space|ifs_set)' \
        && fail "Using non-existent deprecated ifs_* functions"

    # Ensure we don't have any sloppy 'return' statements which don't specify what
    # return code to use. Because this usually returns the prior return code which
    # is generally not what is intended and causes 'set -e' problems.
    echo "${CONTENTS}" | egrep '^[^#]*return(\s*;|$)' \
        && fail "Ambiguous return statements"

    echo "${CONTENTS}" | grep -P 'ekill.*-(SIG|TERM|KILL|INT|[0-9])' \
        && fail "Ekill or ekilltree cannot take a -SIGNAL argument -- you must specify -s=<signal>"

    [[ ${RC} -eq 0 ]] && eend 0 || { FAILURES+=(${fname}); eend 1; }
done

# Display any errors to STDERR regardless if we've redirected output
array_empty FAILURES && exit 0 || { eerror "Bashlint detected failures in the following $(lval files=FAILURES)" &>/dev/stderr; exit ${#FAILURES[@]}; }
