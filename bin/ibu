#!/usr/bin/env bash

reload()
{
    : ${BASHUTILS_HOME:=$(dirname $0)/..}
    : ${BASHUTILS:=${BASHUTILS_HOME}/share}
    source ${BASHUTILS}/bashutils.sh || { echo "Failed to source ${BASHUTILS}/bashutils.sh" ; exit 1 ; }
    BASHUTILS=$(readlink -f ${BASHUTILS})
    BASHUTILS_HOME=$(readlink -f ${BASHUTILS_HOME})
}
reload

HISTFILE=$(mktemp --tmpdir ibashutils_$$_XXXXXX)
trap_add "rm --force \"${HISTFILE}\""

: ${IBU_PROMPT:=$(ecolor green)$'IBU>\n'$(ecolor none)}

# Trap SIGINT during read in such a way that Ctrl-C
#    1) doesn't blow us up
#    2) resets the read, giving you an empty input buffer
#
DEFAULT_SIGINT=$(trap -p SIGINT)
protected_read()
{
    # I don't strictly understand this bash behavior, but having "return" in
    # this trap ensures that when you start typing on a line and hit Ctrl-C,
    # that you get a new clean line.
    #
    # The return code does not get passed to the caller, which is strange.  But
    # having return there definitely makes a behavior difference.
    trap "cmd='' ; echo ; ${DEFAULT_SIGINT} ; return 0" SIGINT
    read "${@}"
}

repl()
{
    while true ; do
        # Note: In typical bashutils style, I would probably use tryrc here,
        # but I want to make sure that all commands are executed in the same
        # shell.
        protected_read -e -r -p "${IBU_PROMPT}" cmd && rc=0 || rc=$?

        edebug "$(lval rc cmd)"
        if [[ ${rc} -eq 1 ]] ; then
            # Exit code 1 from read means that it encountered EOF (e.g. the
            # user probably hit Ctrl-D)
            exit 0
        fi

        # Skip empty commands
        [[ -z ${cmd} ]] && continue

        history -s "${cmd}"
        eval ${cmd}
    done
}

# It's really annoying to die when you're working interactively and you type an
# unbound variable.
set +u

# Likewise, it's a shame to lose your shell and all its variables just because
# die was called.  This way, you print the stack trace, but proceed to work in
# the same shell afterward.
die_handler()
{
    edebug "Error detected and ignored."
    cmd=""
    return 0
}

$(opt_parse \
    ":source s | Source the specified file prior to running the interactive interpreter.")

if [[ -n "${source}" ]] ; then
    source "${source}"
fi

einfo "Bashutils $(lval BASHUTILS)"

repl


